#!/bin/bash

# Refference Foundy CLI https://github.com/foundryvtt/foundryvtt-cli
# TODO package manager, Example (dead): https://github.com/cswendrowski/foundryget

update_app() {
    LOG_NAME="fvtt_server_functions, update_app()"
    # Check if $APP_FILES/main.mjs exists
    if [ ! -f "$APP_FILES/main.mjs" ]; then
        log "$APP_FILES/main.mjs does not exist."

        FILENAME=$(basename "$FOUNDRY_RELEASE_URL")
        
        # Download the Foundry VTT archive
        log "Downloading $FOUNDRY_RELEASE_URL"
        wget -O /tmp/$FILENAME "$FOUNDRY_RELEASE_URL"

        # Unzip the resources into $APP_FILES
        unzip /tmp/$FILENAME 'resources/app/*' -d /tmp/fvtt
        cp -r /tmp/fvtt/resources/app/* $APP_FILES

        # Optionally, you can delete the archive after extraction to save space
        rm -rf /tmp/$FILENAME /tmp/fvtt

        log "Foundry VTT has been updated successfully."
    else
        log "Application present."
    fi
}

permissions(){
    LOG_NAME="fvtt_server_functions, permissions()"
    # ensure the permissions are set correctly
    log "Setting data directory permissions."

    # Retrieve PUID and GUID for $APP_USER (e.g., 'node' user)
    PUID=$(id -u "$APP_USER")  # Get the User ID
    GUID=$(id -g "$APP_USER")  # Get the Group ID

    log_debug "Setting ownership of $DATA_PATH to ${PUID}:${GUID}."

    chown -R "${PUID}:${GUID}" "$DATA_PATH" "$APP_FILES"

    log_debug "Completed setting directory permissions."
}

# TODO backup manager / cron

update_options_from_env() {
    LOG_NAME="fvtt_server_functions, update_options_from_env()"

    # NOTE This is all or nothing. If OPTIONS is present, full config will be overwritten
    # TODO make this not all or nothing, compare options file to ENV. Only overwrite ENV provided options.

    # Define the path to options.json
    local options_file="${DATA_PATH}/Config/options.json"

    # Check if the OPTIONS environment variable is set
    if [ -z "$OPTIONS" ]; then
        return 1  # Exit the function with a non-zero status to indicate failure
    fi

    # Check if options.json exists.
    if [ -f "$options_file" ]; then
        # Fetch the OPTIONS environment variable that holds the JSON string
        local options_json="${OPTIONS}"

        # Write the updated JSON directly to options.json
        echo "$options_json" > "$options_file"

        log "Updated $options_file with environment variables."
    else
        log_warn "$options_file does not exist. First Run?"
    fi
}

# TODO admin password @ /data/Config/admin.txt

# TODO license key

# TODO Startup Flags