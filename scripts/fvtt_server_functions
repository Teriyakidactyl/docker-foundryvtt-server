#!/bin/bash

# Refference Foundy CLI https://github.com/foundryvtt/foundryvtt-cli
# TODO package manager, Example (dead): https://github.com/cswendrowski/foundryget

update_app() {
    LOG_NAME_PREVIOUS=$LOG_NAME
    LOG_NAME="fvtt_server_functions, update_app()"
    # Check if $APP_FILES/main.mjs exists
    if [ ! -f "$APP_FILES/main.mjs" ]; then
        log "$APP_FILES/main.mjs does not exist."

        FILENAME=$(basename "$FOUNDRY_RELEASE_URL")
        
        # Download the Foundry VTT archive
        log "Downloading $FOUNDRY_RELEASE_URL"
        wget -O /tmp/$FILENAME "$FOUNDRY_RELEASE_URL"

        # Unzip the resources into $APP_FILES
        unzip /tmp/$FILENAME 'resources/app/*' -d /tmp/fvtt
        cp -r /tmp/fvtt/resources/app/* $APP_FILES

        # Optionally, you can delete the archive after extraction to save space
        rm -rf /tmp/$FILENAME /tmp/fvtt

        log "Foundry VTT has been updated successfully."
    else
        log "Application present."
    fi
    LOG_NAME=$LOG_NAME_PREVIOUS
}

permissions(){
    LOG_NAME_PREVIOUS=$LOG_NAME
    LOG_NAME="fvtt_server_functions, permissions()"
    # ensure the permissions are set correctly
    log "Setting data directory permissions."

    # Retrieve PUID and GUID for $APP_USER (e.g., 'node' user)
    PUID=$(id -u "$APP_USER")  # Get the User ID
    GUID=$(id -g "$APP_USER")  # Get the Group ID

    log_debug "Setting ownership of $DATA_PATH to ${PUID}:${GUID}."

    chown -R "${PUID}:${GUID}" "$DATA_PATH" "$APP_FILES"

    log_debug "Completed setting directory permissions."
    LOG_NAME=$LOG_NAME_PREVIOUS
}

# TODO backup manager / cron

update_options_from_env() {
    LOG_NAME_PREVIOUS=$LOG_NAME
    LOG_NAME="fvtt_server_functions, update_options_from_env()"
    
    # Define the path to options.json
    local options_file="${DATA_PATH}/Config/options.json"
    
    # Check if the OPTIONS environment variable is set
    if [ -z "$OPTIONS" ]; then
        log_warn "No OPTIONS environment variable set."
        LOG_NAME=$LOG_NAME_PREVIOUS
        return 1
    fi
    
    # Check if options.json exists
    if [ ! -f "$options_file" ]; then
        log_warn "$options_file does not exist. First Run?"
        # If it's the first run, write the full OPTIONS to the file
        echo "$OPTIONS" > "$options_file"
        LOG_NAME=$LOG_NAME_PREVIOUS
        return 0
    fi
    
    # Create a temporary file for the merged result
    local temp_file=$(mktemp)
    
    # Use jq to merge the existing options with the new ones
    # This will only update fields that exist in OPTIONS
    jq -s '.[0] * .[1]' "$options_file" <(echo "$OPTIONS") > "$temp_file"
    
    # Check if jq command was successful
    if [ $? -eq 0 ]; then
        # Backup the original file
        cp "$options_file" "${options_file}.backup"
        
        # Move the merged file to the original location
        mv "$temp_file" "$options_file"
        
        # Log the updated fields
        local updated_fields=$(jq -r 'keys[]' <(echo "$OPTIONS"))
        log "Updated the following fields in $options_file:"
        echo "$updated_fields" | while read field; do
            log "  - $field"
        done
    else
        log_error "Failed to merge options files"
        rm -f "$temp_file"
        LOG_NAME=$LOG_NAME_PREVIOUS
        return 1
    fi
    
    LOG_NAME=$LOG_NAME_PREVIOUS
    return 0
}

# TODO admin password @ /data/Config/admin.txt

# TODO license key

# TODO Startup Flags