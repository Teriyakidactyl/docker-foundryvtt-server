#!/bin/bash

# Refference Foundy CLI https://github.com/foundryvtt/foundryvtt-cli
# TODO package manager, Example (dead): https://github.com/cswendrowski/foundryget

update_app() {
    # Check if $APP_FILES/main.mjs exists
    if [ ! -f "$APP_FILES/main.mjs" ]; then
        log "$APP_FILES/main.mjs does not exist."

        FILENAME=$(basename "$FOUNDRY_RELEASE_URL")
        
        # Download the Foundry VTT archive
        log "Downloading $FOUNDRY_RELEASE_URL"
        wget -O /tmp/$FILENAME "$FOUNDRY_RELEASE_URL"

        # Unzip the resources into $APP_FILES
        unzip /tmp/$FILENAME 'resources/app/*' -d /tmp/fvtt
        cp -r /tmp/fvtt/resources/app/* $APP_FILES

        # Optionally, you can delete the archive after extraction to save space
        rm -rf /tmp/$FILENAME /tmp/fvtt

        log "Foundry VTT has been updated successfully."
    else
        log "Application present."
    fi
}

permissions(){
    # ensure the permissions are set correctly
    log "Setting data directory permissions."

    # Retrieve PUID and GUID for $APP_USER (e.g., 'node' user)
    PUID=$(id -u "$APP_USER")  # Get the User ID
    GUID=$(id -g "$APP_USER")  # Get the Group ID

    log_debug "Setting ownership of $DATA_PATH to ${PUID}:${GUID}."

    chown -R "${PUID}:${GUID}" "$DATA_PATH" "$APP_FILES"

    log_debug "Completed setting directory permissions."
}

# TODO backup manager / cron

update_options_from_env() {
    # Define the path to options.json
    local options_file="${DATA_PATH}/Config/options.json"
    local tmp_options_file="/tmp/tmp.json"

    # Check if options.json exists.
    if [ -f "$options_file" ]; then
        # Iterate over all environment variables starting with OPT_
        for var in $(env | grep ^OPT_ | cut -d= -f1); do
            # Extract the key by removing 'OPT_' prefix
            key="${var#OPT_}"

            # Get the value of the environment variable
            value=$(eval echo \$$var)

            # Check if the value is boolean, null, or integer to convert properly
            case "$value" in
                "true")
                    jq --arg key "$key" --argjson value true \
                        '.[$key] = $value' "$options_file" > $tmp_options_file && mv $tmp_options_file "$options_file"
                    ;;
                "false")
                    jq --arg key "$key" --argjson value false \
                        '.[$key] = $value' "$options_file" > $tmp_options_file && mv $tmp_options_file "$options_file"
                    ;;
                "null")
                    jq --arg key "$key" '.[$key] = null' "$options_file" > $tmp_options_file && mv $tmp_options_file "$options_file"
                    ;;
                *)
                    # If it's an integer or string, use jq to update the field
                    if echo "$value" | grep -q '^[0-9]\+$'; then
                        jq --arg key "$key" --argjson value "$value" \
                            '.[$key] = $value' "$options_file" > $tmp_options_file && mv $tmp_options_file "$options_file"
                    else
                        jq --arg key "$key" --arg value "$value" \
                            '.[$key] = $value' "$options_file" > $tmp_options_file && mv $tmp_options_file "$options_file"
                    fi
                    ;;
            esac
        done

        log "Updated $options_file with environment variables."
    else
        log_warn "Warning: $options_file not found. First Run?"
    fi
}

# TODO Startup Flags