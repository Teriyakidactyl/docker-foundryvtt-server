#!/bin/bash

# Refference Foundy CLI https://github.com/foundryvtt/foundryvtt-cli
# TODO package manager, Example (dead): https://github.com/cswendrowski/foundryget

update_app() {
    # Check if $APP_FILES/main.mjs exists
    if [ ! -f "$APP_FILES/main.mjs" ]; then
        log "$APP_FILES/main.mjs does not exist."

        FILENAME=$(basename "$FOUNDRY_RELEASE_URL")
        
        # Download the Foundry VTT archive
        log "Downloading $FOUNDRY_RELEASE_URL"
        wget -O /tmp/$FILENAME "$FOUNDRY_RELEASE_URL"

        # Unzip the resources into $APP_FILES
        unzip /tmp/$FILENAME 'resources/app/*' -d /tmp/fvtt
        cp -r /tmp/fvtt/resources/app/* $APP_FILES

        # Optionally, you can delete the archive after extraction to save space
        rm -rf /tmp/$FILENAME /tmp/fvtt

        log "Foundry VTT has been updated successfully."
    else
        log "Application present."
    fi
}

permissions(){
    # ensure the permissions are set correctly
    log "Setting data directory permissions."

    # Retrieve PUID and GUID for $APP_USER (e.g., 'node' user)
    PUID=$(id -u "$APP_USER")  # Get the User ID
    GUID=$(id -g "$APP_USER")  # Get the Group ID

    log_debug "Setting ownership of $DATA_PATH to ${PUID}:${GUID}."

    chown -R "${PUID}:${GUID}" "$DATA_PATH" "$APP_FILES"

    log_debug "Completed setting directory permissions."
}

# TODO backup manager / cron

update_options_from_env() {
    # Define the path to options.json
    local options_file="${DATA_PATH}/Config/options.json"
    local tmp_options_file="/tmp/tmp.json"

    # Check if options.json exists.
    if [ -f "$options_file" ]; then
        # Fetch the OPTIONS environment variable that holds the JSON string
        local options_json="${OPTIONS}"

        # Substitute environment variables in the JSON string
        # For any placeholder like ${ENV_VAR}, it will be replaced with the actual value from the environment
        options_json=$(echo "$options_json" | envsubst)

        # Save the updated JSON to the temporary file
        echo "$options_json" > "$tmp_options_file"

        # Merge the updated JSON into the original options.json file using jq
        jq -s '.[0] * .[1]' "$options_file" "$tmp_options_file" > "$options_file"

        log "Updated $options_file with environment variables."
    else
        log "Options file $options_file does not exist."
    fi
}

# TODO Startup Flags